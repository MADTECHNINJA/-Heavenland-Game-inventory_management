# enable Docker for your repository
options:
  docker: true

definitions:
  steps:
    - step: &docker-build-push-and-deploy-cloudrun
        name: Build - Push - Deploy to GCP (gcr.io/extreme-arch-347212/websocket_server) for Websocket Server
        image: google/cloud-sdk:latest
        caches:
          - docker
        deployment: test
        script:
          # set CLOUDSDK_CONFIG environment variables
          # - export CLOUDSDK_CONFIG=`pwd`/credentials/service-account.json
          # - gcloud config list

          # set image name
          - export IMAGE_NAME='gcr.io/extreme-arch-347212/inventory_server'
          - export SERVICE_NAME='inventory-server'
          - export PROJECT_NAME='extreme-arch-347212'
          - export PORT_VAR=8000

          # Test Envioremental Values
          # echo $IMAGE_NAME
          # echo $SERVICE_NAME
          - echo $PORT_VAR

          # Build image
          - docker build -t $IMAGE_NAME --build-arg DJANGO_SETTINGS_MODULE=websocketserver.settings.cloud_run .

          # Gcloud auth and check
          - gcloud auth activate-service-account --key-file extreme-arch-ws.json
          - gcloud config list

          # config image registry with gcloud helper
          - gcloud auth configure-docker -q

          # push image to gcr
          - docker push $IMAGE_NAME

          # deploy to cloud run
          - gcloud run deploy $SERVICE_NAME --image $IMAGE_NAME --region us-central1 --project $PROJECT_NAME --port $PORT_VAR

          - echo "ALL DONE DEPLOYMENT HAS BEEN SUCCEDED"

    - step: &docker-build-push-and-deploy-cloudrun-production
        name: Build - Push - Deploy to GCP (gcr.io/extreme-arch-347212/websocket_server) for Websocket Server
        image: google/cloud-sdk:latest
        caches:
          - docker
        deployment: production
        script:
          # set CLOUDSDK_CONFIG environment variables
          # - export CLOUDSDK_CONFIG=`pwd`/credentials/service-account.json
          # - gcloud config list

          # set image name
          - export IMAGE_NAME='gcr.io/extreme-arch-347212/inventory_server_production'
          - export SERVICE_NAME='inventory-server-production'
          - export PROJECT_NAME='extreme-arch-347212'
          - export PORT_VAR=8000

          # Test Envioremental Values
          # echo $IMAGE_NAME
          # echo $SERVICE_NAME
          - echo $PORT_VAR

          # Build image
          - docker build -t $IMAGE_NAME .

          # Gcloud auth and check
          - gcloud auth activate-service-account --key-file extreme-arch-ws.json
          - gcloud config list

          # config image registry with gcloud helper
          - gcloud auth configure-docker -q

          # push image to gcr
          - docker push $IMAGE_NAME

          # deploy to cloud run
          - gcloud run deploy $SERVICE_NAME --image $IMAGE_NAME --region us-central1 --project $PROJECT_NAME --port $PORT_VAR

          - echo "ALL DONE DEPLOYMENT HAS BEEN SUCCEDED"

    - step: &build-inventory-mng-server-image
        name: Build Websocket Server Docker image
        image: adoptopenjdk/openjdk11:jre-11.0.9_11.1-alpine
        script:
          - apk add --no-cache openssh-client bash
          - docker build -t inventory-management --build-arg DJANGO_SETTINGS_MODULE=websocketserver.settings.cloud_run .
          - docker save --output tmp-image.docker inventory-management
        artifacts:
          - tmp-image.docker

    - step: &build-inventory-mng-server-image-prod
        name: Build Websocket Server Docker image
        image: adoptopenjdk/openjdk11:jre-11.0.9_11.1-alpine
        script:
          - apk add --no-cache openssh-client bash
          - docker build -t inventory-management  .
          - docker save --output tmp-image.docker inventory-management
        artifacts:
          - tmp-image.docker

    - step: &push-inventory-mng-server-image
        name: Push Websocket Server Docker image to GCP Artifacts Registry
        image: google/cloud-sdk:alpine
        script:
          - export GCLOUD_PROJECT='extreme-arch-347212'
          - docker load --input ./tmp-image.docker
          # Authenticating with the service account key file
          - echo $GCLOUD_API_KEYFILE | base64 -d > ./gcloud-api-key.json
          - gcloud auth activate-service-account --key-file gcloud-api-key.json
          - gcloud config set project $GCLOUD_PROJECT
          # Tag image & push
          - export IMAGE_NAME=us-central1-docker.pkg.dev/extreme-arch-347212/inventory-management/inventory-management:$(echo $BITBUCKET_COMMIT | cut -c1-8)
          - docker tag inventory-management ${IMAGE_NAME}
          # check if google artifacts repository exist. If not create
          - gcloud artifacts repositories list|grep inventory-management || gcloud artifacts repositories create inventory-management --repository-format=docker --location=us-central1
          # Login to google artifact registry
          - gcloud auth configure-docker us-central1-docker.pkg.dev
          - docker push ${IMAGE_NAME}
          # Just to confirm the image tag
          - echo "DOCKER_IMAGE_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-8)" > latest_build_image_tag.sh
          - cat latest_build_image_tag.sh

    - step: &deploy-to-development-dry-run
        name: Deploy to development server
        script:
          - export GCLOUD_PROJECT='extreme-arch-347212'
          - export CLUSTER_NAME='game-server'
          - export CLUSTER_ZONE=us-central1-a
          # Just to confirm the image tag
          - echo "DOCKER_IMAGE_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-8)" > latest_build_image_tag.sh
          - cat latest_build_image_tag.sh
          - source $BITBUCKET_CLONE_DIR/gcloud.sh
          # Downloading the Google Cloud SDK
          - curl -o /tmp/google-cloud-sdk.tar.gz https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-388.0.0-linux-x86_64.tar.gz
          - tar -xvf /tmp/google-cloud-sdk.tar.gz -C /tmp/
          - /tmp/google-cloud-sdk/install.sh -q
          - source /tmp/google-cloud-sdk/path.bash.inc
          # Downloading the Helm
          - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
          - helm version
          # Authenticating with the service account key file
          - echo $GCLOUD_API_KEYFILE | base64 -d > ./gcloud-api-key.json
          - gcloud auth activate-service-account --key-file gcloud-api-key.json
          - gcloud config set project $GCLOUD_PROJECT
          - gcloud auth configure-docker
          - gcloud container clusters get-credentials $CLUSTER_NAME --zone $CLUSTER_ZONE --project $GCLOUD_PROJECT
          - helm upgrade 
            --install
            --namespace="development"
            --set app.release_name="dev-inventory-management"
            --set app.name="inventory-management"
            --set app.replicaCount="1"
            --set app.namespace="development"
            --set app.container.env.port="8000"
            --set app.container.env.settings_module="websocketserver.settings.prod"
            --set app.service.port="8000"
            --set app.service.name="inventory-management"
            --set image.tag="$(echo $BITBUCKET_COMMIT | cut -c1-8)"
            --set ingress.name="inventory-management-ingress"
            --set ingress.namespace="development"
            --set ingress.spec.rules.pathType="Prefix"
            --timeout 600s
            --dry-run
            inventory-management-dev-release 
            ./deployment/inventory-management

    - step: &deploy-to-development
        name: Deploy to development server
        script:
          - export GCLOUD_PROJECT='extreme-arch-347212'
          - export CLUSTER_NAME='game-server'
          - export CLUSTER_ZONE=us-central1-a
          # Just to confirm the image tag
          - echo "DOCKER_IMAGE_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-8)" > latest_build_image_tag.sh
          - cat latest_build_image_tag.sh
          - source $BITBUCKET_CLONE_DIR/gcloud.sh
          # Downloading the Google Cloud SDK
          - curl -o /tmp/google-cloud-sdk.tar.gz https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-388.0.0-linux-x86_64.tar.gz
          - tar -xvf /tmp/google-cloud-sdk.tar.gz -C /tmp/
          - /tmp/google-cloud-sdk/install.sh -q
          - source /tmp/google-cloud-sdk/path.bash.inc
          # Downloading the Helm
          - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
          - helm version
          # Authenticating with the service account key file
          - echo $GCLOUD_API_KEYFILE | base64 -d > ./gcloud-api-key.json
          - gcloud auth activate-service-account --key-file gcloud-api-key.json
          - gcloud config set project $GCLOUD_PROJECT
          - gcloud auth configure-docker
          - gcloud container clusters get-credentials $CLUSTER_NAME --zone $CLUSTER_ZONE --project $GCLOUD_PROJECT
          - helm upgrade 
            --install
            --namespace="development"
            --set app.release_name="dev-inventory-management"
            --set app.name="inventory-management"
            --set app.replicaCount="1"
            --set app.namespace="development"
            --set app.container.env.port="8000"
            --set app.container.env.settings_module="websocketserver.settings.cloud_run"
            --set app.service.port="8000"
            --set app.service.name="inventory-management"
            --set image.tag="$(echo $BITBUCKET_COMMIT | cut -c1-8)"
            --set ingress.name="inventory-management-ingress"
            --set ingress.namespace="development"
            --set app.static_ip_name="inventory-management-ingress"
            --set ingress.spec.rules.pathType="Prefix"
            --wait
            --timeout 600s
            inventory-management-dev-release 
            ./deployment/inventory-management

    - step: &deploy-to-production
        name: Deploy to Production server
        script:
          - export GCLOUD_PROJECT='extreme-arch-347212'
          - export CLUSTER_NAME='game-server'
          - export CLUSTER_ZONE=us-central1-a
          # Just to confirm the image tag
          - echo "DOCKER_IMAGE_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-8)" > latest_build_image_tag.sh
          - cat latest_build_image_tag.sh
          - source $BITBUCKET_CLONE_DIR/gcloud.sh
          # Downloading the Google Cloud SDK
          - curl -o /tmp/google-cloud-sdk.tar.gz https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-388.0.0-linux-x86_64.tar.gz
          - tar -xvf /tmp/google-cloud-sdk.tar.gz -C /tmp/
          - /tmp/google-cloud-sdk/install.sh -q
          - source /tmp/google-cloud-sdk/path.bash.inc
          # Downloading the Helm
          - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
          - helm version
          # Authenticating with the service account key file
          - echo $GCLOUD_API_KEYFILE | base64 -d > ./gcloud-api-key.json
          - gcloud auth activate-service-account --key-file gcloud-api-key.json
          - gcloud config set project $GCLOUD_PROJECT
          - gcloud auth configure-docker
          - gcloud container clusters get-credentials $CLUSTER_NAME --zone $CLUSTER_ZONE --project $GCLOUD_PROJECT
          - helm upgrade 
            --install
            --namespace="production"
            --create-namespace
            --set app.release_name="inventory-management"
            --set app.name="inventory-management"
            --set app.replicaCount="3"
            --set app.namespace="production"
            --set app.container.env.port="8000"
            --set app.container.env.settings_module="websocketserver.settings.prod"
            --set app.service.port="8000"
            --set app.service.name="inventory-management"
            --set image.tag="$(echo $BITBUCKET_COMMIT | cut -c1-8)"
            --set ingress.name="inventory-management-ingress"
            --set ingress.namespace="production"
            --set app.static_ip_name="inventory-management-ingress-prod"
            --set ingress.spec.rules.pathType="Prefix"
            --wait
            --timeout 600s
            inventory-management
            ./deployment/inventory-management

pipelines:
  tags:
    v*:
      - step: *build-inventory-mng-server-image
      - step: *push-inventory-mng-server-image
      - step: *docker-build-push-and-deploy-cloudrun

  default:
    - step: *build-inventory-mng-server-image
    - step: *push-inventory-mng-server-image
    - step: *deploy-to-development-dry-run
    - step: *deploy-to-development

  branches:
    master:
      - step: *docker-build-push-and-deploy-cloudrun
      - step: *build-inventory-mng-server-image
      - step: *push-inventory-mng-server-image
      - step: *deploy-to-development
    prod:
      - step: *docker-build-push-and-deploy-cloudrun-production
      - step: *build-inventory-mng-server-image-prod
      - step: *push-inventory-mng-server-image
      - step: *deploy-to-production
